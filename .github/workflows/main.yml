name: 'Test RumbleDB Parser'

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  TESTED_BRANCH: master
  TESTED_PARSER: jsoniq

jobs:
  build:
    name: Build Rumble
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Rumble Repository
        uses: actions/checkout@v4
        with:
          repository: RumbleDB/rumble
          ref: ${{ env.TESTED_BRANCH }}
          path: rumble

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Build with Maven
        working-directory: ./rumble
        run: mvn clean compile assembly:single

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: rumble-target
          path: rumble/target

  test:
    name: Test - ${{ matrix.test_name }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_name: [ 'App', 'Array', 'Fn1', 'Fn2', 'Map', 'Math', 'Misc', 'Op', 'Prod1', 'Prod2', 'Ser', 'Xs' ]
            
    continue-on-error: true
    steps:
      - name: Checkout Test Suite Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Create directory structure for system-scoped dependency
        run: mkdir -p rumble/target

      - name: Download build artifact into the correct path
        uses: actions/download-artifact@v4
        with:
          name: rumble-target
          path: rumble/target

      - name: Run Maven Tests
        id: run-tests
        run: |
          if [ "${{ env.TESTED_PARSER }}" = "jsoniq" ]; then
            mvn -Dtest=${{ matrix.test_name }}Test test -quiet
          else
            mvn -Dtest=XQuery${{ matrix.test_name }}Test test -quiet
          fi

      - name: Upload Surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-report-${{ matrix.test_name }}
          path: target/surefire-reports/*.xml
          retention-days: 7

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "target/surefire-reports/*.xml"
        if: always()

  spotless-check:
    name: Spotless Check
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Test Suite Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Spotless Check
        run: mvn spotless:check

  collect:
    name: Collect Artifacts
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Test Suite Repository
        uses: actions/checkout@v4 
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Create directory structure for system-scoped dependency
        run: mkdir -p rumble/target

      - name: Download build artifact into the correct path
        uses: actions/download-artifact@v4
        with:
          name: rumble-target
          path: rumble/target
                
      - name: Download all surefire reports
        uses: actions/download-artifact@v4
        with:
          pattern: surefire-report-*
          path: all-surefire-reports
          merge-multiple: true

      - name: Collect and process artifacts
        run: |
          mkdir -p collected-artifacts
          mkdir -p target
          mv all-surefire-reports target/surefire-reports
          cp -r target/surefire-reports collected-artifacts/
          mvn compile
          mvn exec:java

      - name: Upload collected data
        uses: actions/upload-artifact@v4
        with:
          name: collected-data
          path: |
            collected-artifacts
            analytics-results

  plot:
    name: Analytics and Plotting
    needs: collect
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Test Suite Repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Download collected data
        uses: actions/download-artifact@v4
        with:
          name: collected-data
          path: .
            
      - name: Install dependencies and run plotting script
        run: |
          pip install -r analytics/requirements.txt
          python analytics/plot.py > script_output.txt
          cat script_output.txt >> $GITHUB_STEP_SUMMARY

      - name: Upload plots
        uses: actions/upload-artifact@v4
        with:
          name: plots-and-results
          path: |
            plots
            analytics-results
